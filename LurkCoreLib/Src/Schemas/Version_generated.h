// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VERSION_LURK_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_VERSION_LURK_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

namespace Lurk {
namespace Schemas {

struct VersionRequest;

struct VersionResponse;

struct VersionRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4
  };
  int16_t Version() const {
    return GetField<int16_t>(VT_VERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VERSION) &&
           verifier.EndTable();
  }
};

struct VersionRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Version(int16_t Version) {
    fbb_.AddElement<int16_t>(VersionRequest::VT_VERSION, Version, 0);
  }
  explicit VersionRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VersionRequestBuilder &operator=(const VersionRequestBuilder &);
  flatbuffers::Offset<VersionRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VersionRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<VersionRequest> CreateVersionRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t Version = 0) {
  VersionRequestBuilder builder_(_fbb);
  builder_.add_Version(Version);
  return builder_.Finish();
}

struct VersionResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4
  };
  int16_t Version() const {
    return GetField<int16_t>(VT_VERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VERSION) &&
           verifier.EndTable();
  }
};

struct VersionResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Version(int16_t Version) {
    fbb_.AddElement<int16_t>(VersionResponse::VT_VERSION, Version, 0);
  }
  explicit VersionResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VersionResponseBuilder &operator=(const VersionResponseBuilder &);
  flatbuffers::Offset<VersionResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VersionResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<VersionResponse> CreateVersionResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t Version = 0) {
  VersionResponseBuilder builder_(_fbb);
  builder_.add_Version(Version);
  return builder_.Finish();
}

}  // namespace Schemas
}  // namespace Lurk

#endif  // FLATBUFFERS_GENERATED_VERSION_LURK_SCHEMAS_H_
